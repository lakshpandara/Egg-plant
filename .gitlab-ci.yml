image: docker:20.10.6

variables:
  STAGING_REGISTRY: "registry.gitlab.com"
  DATABASE_URL: "postgresql://postgres:example@postgres:5432/postgres?schema=public"
  NEXTAUTH_URL: http://localhost:3000/api/auth
  SECRET: "unset_nextauth_secret"
  QUERY_EXPANDER_URL: http://localhost:8080
  GOOGLE_ID: "unset_google_id"
  GOOGLE_SECRET: "unset_google_secret"
  SENDGRID_API_KEY: "SG.foo"
  REDIS_URL: "redis://localhost:6379"
  DEPS_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-deps
  SCHEMA_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-schema
  BUILDER_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-builder
  LATEST_IMAGE: ${CI_REGISTRY_IMAGE}:latest
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

services:
  - docker:20.10.6-dind

before_script:
  - echo "$CI_BUILD_TOKEN" | docker login -u gitlab-ci-token --password-stdin $STAGING_REGISTRY

stages:
  - deps
  - generate_schema
  - test
  - build
  - dockerize
  - deploy_staging
  - deploy_dev

deps:
  stage: deps
  script:
    - echo docker build \
      --cache-from $DEPS_IMAGE \
      --target deps --tag $DEPS_IMAGE \
      --build-arg BUILDKIT_INLINE_CACHE=1 . | sh
    - docker push -q $DEPS_IMAGE
  only:
    - merge_requests

generate_schema:
  stage: generate_schema
  script:
    - echo docker build \
      --cache-from $SCHEMA_IMAGE --cache-from $DEPS_IMAGE \
      --target schema --tag $SCHEMA_IMAGE \
      --build-arg BUILDKIT_INLINE_CACHE=1 . | sh
    - docker push -q $SCHEMA_IMAGE
  only:
    - merge_requests

build:
  stage: build
  script:
    - echo docker build \
      --cache-from $BUILDER_IMAGE --cache-from $SCHEMA_IMAGE --cache-from $DEPS_IMAGE \
      --tag $BUILDER_IMAGE \
      --build-arg BUILDKIT_INLINE_CACHE=1 . | sh
    - docker push -q $BUILDER_IMAGE
  only:
    - master

test:
  stage: test
  image:
    name: $SCHEMA_IMAGE
    entrypoint: ["/usr/bin/env"]
  before_script: []
  services:
    - postgres:12.2-alpine
    - redis:latest
  variables:
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: "example"
    POSTGRES_HOST_AUTH_METHOD: trust
    REDIS_URL: redis://redis:6379
  script:
    - cp -r /app/node_modules ./
    - yarn ts-node eslint/test.js
    - yarn lint
    - yarn tsc -b .
    - yarn prisma migrate reset -f
    - yarn test
  only:
    - merge_requests

dockerize:
  stage: dockerize
  script:
    - docker pull -q $BUILDER_IMAGE || true
    - RELEASE_IMAGE=$CI_REGISTRY_IMAGE:${CI_COMMIT_SHA}
    - docker tag $BUILDER_IMAGE  $LATEST_IMAGE
    - docker tag $BUILDER_IMAGE  $RELEASE_IMAGE
    - docker push -q $LATEST_IMAGE
    - docker push -q $RELEASE_IMAGE
    - apk add --update curl && curl -XPOST -H "Content-type:application/json" --data "{\"text\":\"$CI_PROJECT_NAME $RELEASE_IMAGE is ready!\"}" "https://hooks.slack.com/services/$SLACK_HOOK"
    - echo "RELEASE_IMAGE=$RELEASE_IMAGE" >> build.env
  only:
    - master

deploy_dev:
  stage: deploy_dev
  variables:
    ARGO_APP_NAME: $CI_PROJECT_NAME
    RELEASE_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
    PARENT_PATH: $CI_PROJECT_PATH
    ENVIRONMENT: dev
  trigger:
    project: project-sierra/sierra-manifests
  when: manual
  only:
    - master

deploy_staging:
  stage: deploy_staging
  variables:
    ARGO_APP_NAME: $CI_PROJECT_NAME
    RELEASE_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
    PARENT_PATH: $CI_PROJECT_PATH
    ENVIRONMENT: staging
  trigger:
    project: project-sierra/sierra-manifests
  only:
    - master
